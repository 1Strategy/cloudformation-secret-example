AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to support runtime creation and encryption of stack secrets'
# Written by Pavel Yarema 1Strategy, modified by Justin Iravani

Parameters:  
  SecretParameterName:
    Description: Parameter name under which to store the Secret for Cloudformation. 
    Type: String
    Default: CloudformationSecret
  Secret:
    NoEcho: true
    Description: The actual secret
    Type: String
    Default: SomeSecret
  IAMRoleName:
    Description: IAM Role Name that Lambda functions will be assuming
    Type: String
    Default: CloudformationSecretsLambdaExecutionRole


Resources:

  SSMParameter:
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: !Ref SecretParameterName 
      Description: String
      Type: String
      Value: "TemporarySecret"

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      Policies: 
        - 
          PolicyName: "SSM-Secret-Parameter-Access"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: !Join ["", ["arn:aws:ssm:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":","parameter/", !Ref SecretParameterName]]
      RoleName: !Sub
            - ${AWS::StackName}-${Name}
            - { Name: !Ref IAMRoleName}

  SecretKeyUsagePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: "AllowUseOfKey"
            Effect: "Allow"
            Action: 
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: !GetAtt EncryptionKey.Arn

      ManagedPolicyName: GrantUseofSecretsKey
      Roles: 
        - !Ref LambdaExecutionRole

  ##########################################################################
  # The GenerateSecretLambda in this use case is just consuming a provided 
  # secret in the form of a noecho Cloudformation Parameter, HOWEVER
  # the secret can be generated dynamically by using the passwordgenerator()
  # function commented out in the code below.
  ##########################################################################

  GenerateSecretLambda:
    Type: "AWS::Lambda::Function"
    Properties: 
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import random
          import boto3
          import logging
          import traceback
          import time

          # def passwordgenerator():
          #   try:
          #       s = "abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%^&*()?"
          #       passlen = 25
          #       p =  "".join(random.sample(s,passlen ))
          #       print ("Password Successfully Generated")
          #       return p
            
          #   except Exception as e:
          #       raise


          def write2ssm(parameter_name, value, key):
            try:
              client = boto3.client('ssm')
              time.sleep(60)
              logging.info("Writing password to parameter specified.")
              response = client.put_parameter(
                  Name= parameter_name,
                  Value= value,
                  Type='SecureString',
                  KeyId= key,
                  Overwrite=True,
                  AllowedPattern="^[^\\/\"@]{8,}$"
                )
            except Exception as e:
              raise

          def handler(event, context):
            
            try:
              logging.info(event)
              logging.info("Attempting to write parameter")
              
              parameter_name = (event['ResourceProperties']['SecretParameterName'])
              key_id = event['ResourceProperties']['KeyId']
              secret = event['ResourceProperties']['Secret']
              # secret = passwordgenerator()
              
              responseData = {}
              request_type = event['RequestType']
              
              if request_type in ['Create','Update']:
                # Write secret to SSM 
                write2ssm(parameter_name, secret, key_id)                
              
              responseData['Data'] = "Success"
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")

            except Exception as e:
              logging.error(traceback.format_exc())
              responseData = {}
              responseData['Error'] = "Lambda Function was unable to successfully generate a password and place it in a SSM parameter"
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData, "CustomResourcePhysicalID")
              raise

      Description: Lambda Function that will generate random passwords
      FunctionName: GenerateSecretLambda
      Handler: index.handler
      MemorySize: 128 #Minimum allowed vlaue. No reason for this lambda function to use more than 128MB.
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      Timeout: 120
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-${Name}
            - { Name: GenerateSecretLambda }
    DependsOn: SSMParameter

  ##########################################################################
  # The GetSecretLambda retrieves a secret from parameter store and returns
  # it to Cloudformation. The retrived secret can be consumed by some other 
  # AWS CloudFormation resources after the CustomResource InvokeGetSecretLambda
  # is executed below. 
  # 
  # !GetAtt InvokeGetSecretLambda.Secret
  ##########################################################################
  
  GetSecretLambda:
    Type: "AWS::Lambda::Function"
    Properties: 
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import traceback
          from botocore.vendored import requests

          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          def getssmparameter(parameter_name):
              try:
                  client = boto3.client('ssm')
                  
                  print ("Getting password from parameter specified.")
                  response = client.get_parameter(
                  Name= parameter_name,
                  WithDecryption=True
                  )
                  
                  return response
              
              except Exception as e:
                  raise

          def handler(event, context):
              try:
                  parameter_name = (event['ResourceProperties']['SecretParameterName'])
                  
                  # Get password from SSM 
                  response = getssmparameter(parameter_name)
                  
              
                  responseData = {}
                  
                  responseData['Secret'] = response['Parameter']['Value']
                  send(event, context, SUCCESS, responseData, "CustomResourcePhysicalID",noEcho=True) #Need to remove sensitive data from logs

              except Exception as e:
                  logging.error(traceback.format_exc())
                  responseData = {}
                  responseData['Error'] = "Lambda Function was unable to successfully retrieve the password from the SSM parameter"
                  send(event, context, FAILED, responseData, "CustomResourcePhysicalID")
                  raise


          def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
              responseUrl = event['ResponseURL']

              print(responseUrl)

              responseBody = {}
              responseBody['Status'] = responseStatus
              responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
              responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
              responseBody['StackId'] = event['StackId']
              responseBody['RequestId'] = event['RequestId']
              responseBody['LogicalResourceId'] = event['LogicalResourceId']
              responseBody['NoEcho'] = noEcho
              responseBody['Data'] = responseData

              json_responseBody = json.dumps(responseBody)

              headers = {
                  'content-type' : '',
                  'content-length' : str(len(json_responseBody))
              }

              try:
                  response = requests.put(responseUrl,
                                          data=json_responseBody,
                                          headers=headers)
                  print("Status code - " + response.reason)
              except Exception as e:
                  print("send(..) failed executing requests.put(..) -" + str(e))

      Description: Lambda Function that will retrieve password from encrypted SSM parameter.
      FunctionName: GetSecretLambda
      Handler: index.handler
      MemorySize: 128 #Minimum allowed vlaue. No reason for this lambda function to use more than 128MB.
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      Timeout: 20
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-${Name}
            - { Name: GetSecretLambda }

  EncryptionKey:
    Type: "AWS::KMS::Key"
    Properties: 
      Description: KMS Key to encrypt SSM Parameter that include RDS master passwords. 
      Enabled: true
      KeyPolicy: 
        Version: "2012-10-17"
        Id: "key-default-1"
        Statement: 
          - 
            Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal: 
              AWS:
                !Join ["", [ "arn:aws:iam::", !Ref "AWS::AccountId", ":root"]]
            Action: 
              - "kms:*"
            Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-${Name}
            - { Name: SSM-KMS-KEY }
      
  EncryptionKeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: !Sub alias/${AWS::StackName}-secret
      TargetKeyId: !Ref EncryptionKey

  InvokeGenerateSecretLambda:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    Version: "1.0"
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - GenerateSecretLambda
        - Arn
      SecretParameterName: 
        Ref: SecretParameterName
      KeyId: 
        Ref: EncryptionKey
      Secret: 
        Ref: Secret
    DependsOn: EncryptionKey

  InvokeGetSecretLambda:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    Version: "1.0"
    Properties:
      ServiceToken: 
        Fn::GetAtt:
        - GetSecretLambda
        - Arn
      SecretParameterName: 
        Ref: SecretParameterName
    DependsOn: InvokeGenerateSecretLambda

Outputs:
  GetSecretLambdaOutput:
    Value: !GetAtt InvokeGetSecretLambda.Secret

